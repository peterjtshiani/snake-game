{"version":3,"sources":["component/header.js","component/snake.js","component/food.js","App.js","serviceworker.js","index.js"],"names":["Header","props","LogIN","setState","loggedIn","LogOUt","state","userName","Login","this","className","onClick","onChange","e","target","value","toUpperCase","React","Component","snakeDots","map","dot","i","style","left","top","key","getRandomCoordinates","Math","floor","random","initialState","food","speed","direction","ruleSet","alert","App","onKeyDown","window","event","keyCode","moveSnake","dots","head","length","push","shift","setInterval","document","onkeydown","checkIfOutOfBorders","checkIfCollapsed","checkIfEat","onGameOver","snake","pop","forEach","enlargeSnake","increaseSpeed","newSnake","unshift","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.31f5c69b.chunk.js","sourcesContent":["import React from 'react';\r\nimport './App.css';\r\n\r\n/*creating a fucntioninal component with a login details*/\r\nclass Header extends React.Component {\r\n\r\n/*Setting up the fucntionlity of the login adn out out*/\r\n  constructor(props){\r\n      super(props);\r\n      this.state ={loggedIn:false, userName:\"\"}\r\n  };\r\n\r\n  LogIN = () => {\r\n    this.setState({loggedIn:false})\r\n  };\r\n\r\n  LogOUt = () => {\r\n    this.setState({loggedIn:true})\r\n  };\r\n\r\n\r\n  /*rendering the header with the loogin option, logo and company name*/\r\n  render () {\r\n    const Login = this.state.loggedIn;\r\n    return(\r\n      <div className=\"App\">\r\n            {Login ? (\r\n             <div className= \"welcome\">\r\n                <h2>welcome Back ,{this.state.userName} </h2>\r\n                <button onClick={this.LogIN}>Logout</button>\r\n              </div>\r\n            ) : (\r\n              <div className= \"welcome\">\r\n                <h2>Sign in to continue</h2>\r\n                <input onChange={(e) => this.setState({userName : e.target.value.toUpperCase()})}/>\r\n                <button onClick={this.LogOUt}>Sign in</button>\r\n              </div>\r\n            )}\r\n        </div>\r\n      )\r\n  }\r\n}\r\n\r\nexport default Header;\r\n","import React from 'react';\r\n\r\n// setting up the snake\r\nexport default (props) => {\r\n  return (\r\n    <div>\r\n      {props.snakeDots.map((dot, i) => {\r\n        const style = {\r\n          left: `${dot[0]}%`,\r\n          top: `${dot[1]}%`\r\n        }\r\n        return (\r\n          <div className=\"snake-dot\" key={i} style={style}></div>\r\n        )\r\n      })}\r\n    </div>\r\n  )\r\n}","import React from 'react';\r\n\r\n// setting up the food which the snake feeds on\r\nexport default (props) => {\r\n\r\n  const style = {\r\n    left: `${props.dot[0]}%`,\r\n    top: `${props.dot[1]}%`\r\n  }\r\n\r\n  return (\r\n    <div className=\"snake-food\" style={style}></div>\r\n  )\r\n}","import React, { Component } from 'react';\nimport Header from './component/header'\nimport Snake from './component/snake';\nimport Food from './component/food';\nimport './component/App.css'\n\nconst getRandomCoordinates = () => {\n  let min = 1;\n  let max = 98;\n  let x = Math.floor((Math.random()*(max-min+1)+min)/2)*2;\n  let y =  Math.floor((Math.random()*(max-min+1)+min)/2)*2;\n  return [x,y]\n}\n\nconst initialState = {\n  food: getRandomCoordinates(),\n  speed: 200,\n  direction: 'RIGHT',\n  snakeDots: [\n    [0,0],\n    [2,0]\n  ]\n}\n\nfunction ruleSet(){\n    alert(\n      `Ruleset\n\n       1. Success of the player depends on the choices she or he makes. \n       2. Every turn is controled by the UP ; LEFT ; DOWN ; RIGHT buttonon your keyboard.\n       3. The snakeâ€™s head moves by its length in the direction set by the player.\n       4. Once the snake the 4 wall the game is over.\n`)\n  }\n\nclass App extends Component {\n\n  state = initialState;\n\n  componentDidMount() {\n    setInterval(this.moveSnake, this.state.speed);\n    document.onkeydown = this.onKeyDown;\n  }\n\n  componentDidUpdate() {\n    this.checkIfOutOfBorders();\n    this.checkIfCollapsed();\n    this.checkIfEat();\n  }\n\n  onKeyDown = (e) => {\n    e = e || window.event;\n    switch (e.keyCode) {\n      case 38:\n        this.setState({direction: 'UP'});\n        break;\n      case 40:\n        this.setState({direction: 'DOWN'});\n        break;\n      case 37:\n        this.setState({direction: 'LEFT'});\n        break;\n      case 39:\n        this.setState({direction: 'RIGHT'});\n        break;\n        default:\n    }\n  }\n\n  moveSnake = () => {\n    let dots = [...this.state.snakeDots];\n    let head = dots[dots.length - 1];\n\n    switch (this.state.direction) {\n      case 'RIGHT':\n        head = [head[0] + 2, head[1]];\n        break;\n      case 'LEFT':\n        head = [head[0] - 2, head[1]];\n        break;\n      case 'DOWN':\n        head = [head[0], head[1] + 2];\n        break;\n      case 'UP':\n        head = [head[0], head[1] - 2];\n        break;\n      default:\n    }\n    dots.push(head);\n    dots.shift();\n    this.setState({\n      snakeDots: dots\n    })\n  }\n\n  checkIfOutOfBorders() {\n    let head = this.state.snakeDots[this.state.snakeDots.length - 1];\n    if (head[0] >= 100 || head[1] >= 100 || head[0] < 0 || head[1] < 0) {\n      this.onGameOver();\n    }\n  }\n\n  checkIfCollapsed() {\n    let snake = [...this.state.snakeDots];\n    let head = snake[snake.length - 1];\n    snake.pop();\n    snake.forEach(dot => {\n      if (head[0] === dot[0] && head[1] === dot[1]) {\n        this.onGameOver();\n      }\n    })\n  }\n\n  checkIfEat() {\n    let head = this.state.snakeDots[this.state.snakeDots.length - 1];\n    let food = this.state.food;\n    if (head[0] === food[0] && head[1] === food[1]) {\n      this.setState({\n        food: getRandomCoordinates()\n      })\n      this.enlargeSnake();\n      this.increaseSpeed();\n    }\n  }\n\n  enlargeSnake() {\n    let newSnake = [...this.state.snakeDots];\n    newSnake.unshift([])\n    this.setState({\n      snakeDots: newSnake\n    })\n  }\n\n  increaseSpeed() {\n    if (this.state.speed > 10) {\n      this.setState({\n        speed: this.state.speed - 10\n      })\n    }\n  }\n\n  onGameOver() {\n    alert(`Game Over. Snake length is ${this.state.snakeDots.length}`);\n    this.setState(initialState)\n  }\n\n  \n\n  render() {\n    return (\n      <div>\n         <Header/>\n        <div className=\"game-area\">\n          <Snake snakeDots={this.state.snakeDots}/>\n          <Food dot={this.state.food}/>\n          <button onClick={ruleSet}>Help</button>\n       </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceworker';\r\nimport { BrowserRouter } from 'react-router-dom'\r\n\r\n\r\nReactDOM.render((<BrowserRouter>\r\n    <App />\r\n  </BrowserRouter>), document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();"],"sourceRoot":""}